// <auto-generated />
using System;
using Microservice.InternetOfThingsManager.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Microservice.InternetOfThingsManager.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microservice.InternetOfThingsManager.DAL.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FunctionalArray")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InitTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Microservice.InternetOfThingsManager.DAL.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SensorDatas");
                });

            modelBuilder.Entity("Microservice.InternetOfThingsManager.DAL.Models.SensorFunctional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SensorFunctionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Температура воздуха",
                            Name = "Temperature"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Влажность воздуха",
                            Name = "Air humidity"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Атмосферное давление",
                            Name = "Atmospheric pressure"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Температура почвы",
                            Name = "Soil temperature"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Влажность почвы",
                            Name = "Soil moisture"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
