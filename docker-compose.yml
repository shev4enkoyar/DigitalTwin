version: '3.4'

services:
  microservice.dashboardmanager:
    image: ${DOCKER_REGISTRY-}microservicedashboardmanager
    ports:
      - "49162:49162"
    build:
      context: .
      dockerfile: Microservices/Microservice.DashboardManager/Dockerfile
    environment:
      - ASPNETCORE_URLS=https://0.0.0.0:49162
      - ASPNETCORE_HTTPS_PORT=49162
      - ASPNETCORE_Kestrel__Certificates__Default__Password=
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/servercert.pfx
    volumes:
      - /etc/ssl/private/agrodigitaltwin:/etc/ssl/private/agrodigitaltwin

  microservice.mapmanager:
    image: ${DOCKER_REGISTRY-}microservicemapmanager
    ports:
      - "49165:49165"
    build:
      context: .
      dockerfile: Microservices/Microservice.MapManager/Dockerfile

  microservice.subscriptionmanager:
    image: ${DOCKER_REGISTRY-}microservicesubscriptionmanager
    ports:
      - "49169:49169"
    build:
      context: .
      dockerfile: Microservices/Microservice.SubscriptionManager/Dockerfile

  microservice.modeltaskmanager:
    image: ${DOCKER_REGISTRY-}microservicemodeltaskmanager
    ports:
      - "49171:49171"
    build:
      context: .
      dockerfile: Microservices/Microservice.ModelTaskManager/Microservice.ModelTaskManager/Dockerfile


  microservice.forecastmanager:
    image: ${DOCKER_REGISTRY-}microserviceforecastmanager
    ports:
      - "49173:49173"
    build:
      context: .
      dockerfile: Microservices/Microservice.ForecastManager/Dockerfile


  microservice.weathermanager:
    image: ${DOCKER_REGISTRY-}microserviceweathermanager
    ports:
      - "49175:49175"
    build:
      context: .
      dockerfile: Microservices/Microservice.WeatherManager/Dockerfile


  microservice.filemanager:
    image: ${DOCKER_REGISTRY-}microservicefilemanager
    ports:
      - "49177:49177"
    volumes:
      - ./docs:/root/
    build:
      context: .
      dockerfile: Microservices/Microservice.FileManager/Dockerfile

